#include <iostream>
#include <fstream>
using namespace std;

template <class T> class Node{
	private:
		T key;
		Node <T> *left, *right, *parent;
	public:
		Node(T key){
			this->key=key;
			left = right = parent = NULL;
		}
		void setKey(T key){
			this->key=key;
		}
		void setLeft(Node <T> *left){
			this->left=left;
		}
		void setRight(Node <T> *right){
			this->right=right;
		}
		void setParent(Node <T> *parent){
			this->parent=parent;
		}
		T getKey(){
			return key;
		}
		Node <T> *getLeft(){
			return left;
		}
		Node <T> *getRight(){
			return right;
		}
		Node <T> *getParent(){
			return parent;
		}
};

template <class T> class BST{
	private:
		Node <T> *root;
		int N;
		
		Node <T> *_search(T x, Node <T> *y){
			if (!y) return NULL;
			if (x == y->getKey()) return y;
			if (x < y->getKey()) return _search(x, y->getLeft());
			return _search(x, y->getRight());
		}
		
		Node <T> *_succ(Node <T> *y){
			if(y->getRight()){
				y = _min(y->getRight());
				return y;
			}
			else{
				T x = y->getKey();
				do y = y->getParent();
				while (y && x > y->getKey());
				if(y){
					return y;
				}
				return NULL;
			}
		}
		
		Node <T> *_min(Node <T> *y){
			if (!y || !y->getLeft()){return y;}
			return _min(y->getLeft());
		}
		
		void _canc(Node <T> *y, T x){
			Node <T> *tmp = _search(x, y);
			if (tmp){
				if (tmp->getLeft() && tmp->getRight()){
					Node <T> *s = _succ(tmp);
					tmp->setKey(s->getKey());
					_canc(s, s->getKey());
				}
				else{
					Node <T> *child = tmp->getLeft();
					if (!child){
						child = tmp->getRight();
					}
					Node <T> *p = tmp->getParent();
					if(p){
						if(x < p->getKey()){
							p->setLeft(child);
						}
						else{
							p->setRight(child);
						}
					}
					else{
						root = child;
					}
					if (child){
						child->setParent(p);
					}
					N--;
				}
			}
		}
		
		int massimo(int l, int r){
			if (l>r) return l;
			return r;
		}
		
		int _altezza(Node <T>*y){
			if (!y) return 0;
			int l = _altezza(y->getLeft());
			int r = _altezza(y->getRight());
			return massimo(l, r)+1;
		}
		
	public:
		BST(){
			root = NULL;
			N = 0;
		}
		void insert(T key){
			Node <T> *newnode = new Node <T>(key);
			Node <T> *p = NULL;
			Node <T> *tmp = root;
			while (tmp){
				p = tmp;
				if (key <= tmp->getKey()){
					tmp = tmp->getLeft();
				}
				else {
					tmp = tmp->getRight();
				}
			}
			if (p){
				if (key <= p->getKey()){
					p->setLeft(newnode);
				}
				else{
					p->setRight(newnode);
				}
			}
			else{
				root = newnode;
			}
			newnode->setParent(p);
			N++;
		}
		
		int altezza(){
			return _altezza(root);	
		}
		
		void canc(T x){
			_canc(root, x);
		}
};

int main(){
	fstream infile, outfile;
	infile.open("input.txt", ios::in);
	outfile.open("output.txt", ios::out);
	
	for(int task=0; task<100; task++){
		string type;
		int n;
		infile >> type >> n;
		BST <double> bst;
		for(int i=0; i<n; i++){
			char c;
			infile >> c;
			if (c == 'i'){
				infile >> c >> c >> c;
				double ele;
				infile >> ele;
				bst.insert(ele);
			}
			else{
				infile >> c >> c >> c >> c;
				double ele;
				infile >> ele;
				bst.canc(ele);
			}
		}
		outfile << bst.altezza() << endl;
	}	
	return 0;
}
