#include <iostream>
#include <fstream>

using namespace std;

template <class T> class Node{
	private:
		T key;
		Node <T> *left, *right, *parent;
	public:
		Node(T key){
			this->key=key;
			left = right = parent = NULL;
		}	
		void setKey(T key){
			this->key=key;
		}
		void setParent(Node <T> *parent){
			this->parent=parent;
		}
		void setLeft(Node <T> *left){
			this->left=left;
		}
		void setRight(Node <T> *right){
			this->right=right;
		}
		T getKey(){
			return key;
		}
		Node <T> *getParent(){
			return parent;
		}
		Node <T> *getLeft(){
			return left;
		}
		Node <T> *getRight(){
			return right;
		}
};

template <class T> class BST{
	private:
		Node <T> *root;
		int N;
		
		Node <T> *_search(T x, Node <T> *y){
			if (!y) return NULL;
			if (y->getKey() == x) return y;
			if (x < y->getKey()) return _search(x, y->getLeft());
			return _search(x, y->getRight());
		}
		
		Node <T> *_succ(Node <T> *y){
			if(y->getRight()){
				y = _min(y->getRight());
				return y;
			}
			else{
				T x = y->getKey();
				do y=y->getParent();
				while (y && x > y->getKey());
				if (y){
					return y;
				}
				return NULL;
			}
		}
		
		Node <T> *_min(Node <T> *y){
			if (!y || !y->getLeft()) return y;
			return _min(y->getLeft());
		}
		
		Node <T> *_pred(Node <T> *y){
			if(y->getLeft()){
				y = _max(y->getLeft());
				return y;
			}
			else{
				T x = y->getKey();
				do y=y->getParent();
				while (y && x < y->getKey());
				if (y){
					return y;
				}
				return NULL;
			}
		}
		
		Node <T> *_max(Node <T> *y){
			if (!y || !y->getRight()) return y;
			return _max(y->getRight());
		}
		
		void _canc(Node <T> *y, T x){
			Node <T> *tmp = _search(x, y);
			if (tmp){
				if (tmp->getLeft() && tmp->getRight()){
					Node <T> *s = _succ(tmp);
					tmp->setKey(s->getKey());
					_canc(s, s->getKey());
				}
				else{
					Node <T> *child = tmp->getLeft();
					if (!child) child = tmp->getRight();
					Node <T> *parent = tmp->getParent();
					if (parent){
						if(x < parent->getKey()){
							parent->setLeft(child);
						}
						else{
							parent->setRight(child);
						}
					}
					else{
						root = child;
					}
					if(child){
						child->setParent(parent);
					}
					N--;
				}
			}
		}
		
	public:
		BST(){
			root = NULL;
			N = 0;
		}
		void insert(T key){
			Node <T> *newnode = new Node <T> (key);
			Node <T> *tmp = root;
			Node <T> *parent = NULL;
			while (tmp){
				parent = tmp;
				if (key <= tmp->getKey()) tmp = tmp->getLeft();
				else tmp = tmp->getRight();
			}
			if (parent){
				if (key <= parent->getKey()) parent->setLeft(newnode);
				else parent->setRight(newnode);
			}
			else {
				root = newnode;
			}
			newnode->setParent(parent);
			N++;
			}
			
			void canc(T key){
				_canc(root, key);
			}
			
			T pred(T key){
				Node <T> *tmp = _search(key, root);
				tmp = _pred(tmp);
				if(tmp){
					return tmp->getKey();
				}
				return -1;
			}
};


int main(){
	fstream infile, outfile;
	infile.open("input.txt", ios::in);
	outfile.open("output.txt", ios::out);
	
	for(int task=0; task<100; task++){
		string type;
		int N, M;
		infile >> type >> N >> M;
		
		if(type == "double" || type == "int"){
			BST <double> bst;
			for (int i=0; i<N; i++){
				char c;
				infile >> c;
				if (c == 'i'){
					infile >> c >> c >> c;
					double ele;
					infile >> ele;
					bst.insert(ele);
				}
				else{
					infile >> c >> c >> c >> c;
					double ele;
					infile >> ele;
					bst.canc(ele);
				}
			}
			for (int i=0; i<M; i++){
				double ele;
				infile >> ele;
				outfile << bst.pred(ele) << " ";
			}
		}
		outfile << endl;
	}
	return 0;
}
