#include <iostream>
#include <fstream>

#define WHITE 0
#define GRAY 1
#define BLACK 2

using namespace std;

template <class T> class Graph{

	private:
		T *array;
		int **matrice;
		int n, e;
		int len;
		int *color;
		int cycle;
		
		int findIndex(T x){
			for (int i = 0; i < n; i++){
				if (array[i] == x){
					return i;
				}
			}
			return -1;			
		}
	public:
		Graph(int len = 100){
			this->len = len;
			n = e = 0;
			array = new T[len];
			matrice = new int*[len];
			for (int i = 0; i < len; i++){
				matrice[i] = new int[len];
				for (int j = 0; j < len; j++){
					matrice[i][j] = 0;
				}
			}
			color = new int[len];
		}	
		
		void addNode(T x){
			array[n] = x;
			n++;
		}
		
		void addEdge(T x, T y){
			int i = findIndex(x);
			int j = findIndex(y);
			if (matrice[i][j] == 0){
				matrice[i][j] = 1;
				e++;
			}
		}
		
		void DFSVisit(int i){
			color[i] = GRAY;
			for (int j = 0; j < n; j++){
				if (matrice[i][j] == 1){
					if (color[j] == WHITE){
						DFSVisit(j);
					}
					else{
						if (color[j] == GRAY){
							cycle++;
						}
					}
				}
			}
			color[i] = BLACK;			
		}
		
		void DFS(){
			cycle = 0;
			for (int i = 0; i < n; i++){
				color[i] = WHITE;
			}
			for (int i = 0; i < n; i++){
				if (color[i] == WHITE){
					DFSVisit(i);
				}
			}			
		}
		
		int getCycle(){
			return cycle;
		}

};


int main(){
	
	fstream infile, outfile;
	infile.open("input.txt", ios::in);
	outfile.open("output.txt", ios::out);
	
	for (int task = 0; task < 100; task++){
		
		int n, e;
		string type;
		infile >> n >> e >> type;
		
		if (type == "int" || type == "double"){
			Graph <double> grafo;
			for (int i = 0; i < n; i++){
				double x;
				infile >> x;
				grafo.addNode(x);
			}
			for (int i = 0; i < e; i++){
				double x, y;
				char c;
				infile >> c >> x >> y >> c;
				grafo.addEdge(x, y);
			}
			grafo.DFS();
			outfile << grafo.getCycle();
		}
		if (type == "char"){
			Graph <char> grafo;
			for (int i = 0; i < n; i++){
				char x;
				infile >> x;
				grafo.addNode(x);
			}
			for (int i = 0; i < e; i++){
				char x, y;
				char c;
				infile >> c >> x >> y >> c;
				grafo.addEdge(x, y);
			}
			grafo.DFS();
			outfile << grafo.getCycle();
		}
		outfile << endl;		
	}
	
return 0;	
}
