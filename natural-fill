#include <iostream>
#include <fstream>
using namespace std;

template <class T> class Node{
	private:
		T key;
		Node <T> *left, *right, *parent;
	public:
		Node(T key){
			this->key=key;
			left = right = parent = NULL;
		}
		void setKey(T key){
			this->key=key;
		}
		void setLeft(Node <T> *left){
			this->left=left;
		}
		void setRight(Node <T> *right){
			this->right=right;
		}
		void setParent(Node <T> *parent){
			this->parent=parent;
		}
		T getKey(){
			return key;
		}
		Node <T> *getLeft(){
			return left;
		}
		Node <T> *getRight(){
			return right;
		}
		Node <T> *getParent(){
			return parent;
		}
};
		
		
template <class T> class BST{
	private:
		Node <T> *root;
		int N;
		
		
		void _nat(Node <T> *y, T *array, int n, int &i){
			if(y){
				_nat(y->getLeft(), array, n, i);
				y->setKey(array[i]);
				i++;
				_nat(y->getRight(), array, n, i);
			}
		}
		
		void _postOrder(Node <T> *y, ostream &os){
			if(y){
				_postOrder(y->getLeft(), os);
				_postOrder(y->getRight(), os);
				os << y->getKey() << " ";
			}
		}
		
	public:
		BST(){
			root = NULL;
			N = 0;
		}
		void insert(T key){
			Node <T> *newnode = new Node <T>(key);
			Node <T> *tmp = root;
			Node <T> *p = NULL;
			while(tmp){
				p = tmp;
				if(key <= tmp->getKey()){
					tmp = tmp->getLeft();
				}
				else{
					tmp = tmp->getRight();
				}
			}
			if(p){
				if(key <= p->getKey()){
					p->setLeft(newnode);
				}
				else{
					p->setRight(newnode);
				}
			}
			else{
				root = newnode;
			}
			newnode->setParent(p);
			N++;
		}
		
		void nat(double *array, int n, int &i){
			_nat(root, array, n, i);
		}
		
		void postOrder(ostream &os){
			_postOrder(root, os);
		}
};
		

int main(){
	fstream infile, outfile;
	infile.open("input.txt", ios::in);
	outfile.open("output.txt", ios::out);
	
	for(int task=0; task<100; task++){
		string type;
		int N;
		infile >> type >> N;
		BST <double> bst;
		for(int i=0; i<N; i++){
			double ele;
			infile >> ele;
			bst.insert(ele);
		}
		double array[N];
		for(int i=0; i<N; i++){
			infile >> array[i];
		}
		int i=0;
		bst.nat(array, N, i);
		bst.postOrder(outfile);
		outfile << endl;
	}
	return 0;
}
